generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  clerkUserId    String           @unique
  email          String           @unique
  fileUploads    FileUpload[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  godMode        Boolean          @default(false)
  GeneticMapping GeneticMapping[]
}

model FileUpload {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  fileName     String
  fileS3Name   String?
  mimeType     String
  category     FileCategory
  status       FileStatus   @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  processedAt  DateTime?
  errorMessage String?

  geneticsFile    GeneticsFile?
  nurseryFile     NurseryFile?
  outplantingFile OutplantingFile?
  monitoringFile  MonitoringFile?

  @@index([userId])
  @@index([status])
  @@index([category])
}

model GeneticsFile {
  id           String        @id @default(cuid())
  fileUpload   FileUpload    @relation(fields: [fileUploadId], references: [id])
  fileUploadId String        @unique
  date         String
  name         String
  email        String
  rows         GeneticsRow[]

  @@index([fileUploadId])
}

model GeneticsRow {
  id               String       @id @default(cuid())
  geneticsFile     GeneticsFile @relation(fields: [fileUploadId], references: [id])
  fileUploadId     String
  localIdGenetProp String
  accessionNumber  String?
  species          String?
  additionalData   Json

  @@index([fileUploadId])
}

model GeneticMapping {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  localGenetId    String
  externalGenetId String
  createdAt       DateTime @default(now())

  @@index([localGenetId])
  @@index([externalGenetId])
}

model NurseryFile {
  id           String       @id @default(cuid())
  fileUpload   FileUpload   @relation(fields: [fileUploadId], references: [id])
  fileUploadId String       @unique
  date         String
  name         String
  email        String
  organization String
  rows         NurseryRow[]

  @@index([fileUploadId])
}

model NurseryRow {
  id             String      @id @default(cuid())
  nurseryFile    NurseryFile @relation(fields: [fileUploadId], references: [id])
  fileUploadId   String
  genetId        String
  quantity       Int
  nursery        String
  additionalData Json

  @@index([fileUploadId])
}

model OutplantingFile {
  id               String           @id @default(cuid())
  fileUpload       FileUpload       @relation(fields: [fileUploadId], references: [id])
  fileUploadId     String           @unique
  date             String
  name             String
  email            String
  reefName         String
  eventCenterpoint String
  siteName         String
  eventName        String
  rows             OutplantingRow[]

  @@index([fileUploadId])
}

model OutplantingRow {
  id              String          @id @default(cuid())
  outplantingFile OutplantingFile @relation(fields: [fileUploadId], references: [id])
  fileUploadId    String
  genetId         String
  quantity        Int
  grouping        String
  additionalData  Json

  @@index([fileUploadId])
}

model MonitoringFile {
  id           String          @id @default(cuid())
  fileUpload   FileUpload      @relation(fields: [fileUploadId], references: [id])
  fileUploadId String          @unique
  date         String
  name         String
  email        String
  coordinates  String
  eventId      String
  rows         MonitoringRow[]

  @@index([fileUploadId])
}

model MonitoringRow {
  id             String         @id @default(cuid())
  monitoringFile MonitoringFile @relation(fields: [fileUploadId], references: [id])
  fileUploadId   String
  additionalData Json

  @@index([fileUploadId])
}

enum FileStatus {
  PENDING // waiting for processing
  PROCESSING // currently being processed
  COMPLETED // successfully processed
  FAILED // processing failed
  DELETED // marked as deleted
}

enum FileCategory {
  Genetics
  GeneticsMapping
  Nursery
  Outplanting
  Monitoring
}
