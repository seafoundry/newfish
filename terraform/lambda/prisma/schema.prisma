generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FileUpload {
  id              String           @id
  userId          String
  fileName        String
  mimeType        String
  status          FileStatus       @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  processedAt     DateTime?
  errorMessage    String?
  category        FileCategory
  fileS3Name      String?
  User            User             @relation(fields: [userId], references: [id])
  GeneticsFile    GeneticsFile?
  MonitoringFile  MonitoringFile?
  NurseryFile     NurseryFile?
  OutplantingFile OutplantingFile?

  @@index([category])
  @@index([status])
  @@index([userId])
}

model GeneticsFile {
  id           String        @id
  fileUploadId String        @unique
  date         String
  email        String
  name         String
  FileUpload   FileUpload    @relation(fields: [fileUploadId], references: [id])
  GeneticsRow  GeneticsRow[]

  @@index([fileUploadId])
}

model MonitoringFile {
  id            String          @id
  fileUploadId  String          @unique
  date          String
  email         String
  name          String
  coordinates   String
  eventId       String
  FileUpload    FileUpload      @relation(fields: [fileUploadId], references: [id])
  MonitoringRow MonitoringRow[]

  @@index([fileUploadId])
}

model NurseryFile {
  id           String       @id
  fileUploadId String       @unique
  date         String
  email        String
  name         String
  organization String
  FileUpload   FileUpload   @relation(fields: [fileUploadId], references: [id])
  NurseryRow   NurseryRow[]

  @@index([fileUploadId])
}

model OutplantingFile {
  id               String           @id
  fileUploadId     String           @unique
  date             String
  email            String
  name             String
  eventCenterpoint String
  eventName        String
  reefName         String
  siteName         String
  FileUpload       FileUpload       @relation(fields: [fileUploadId], references: [id])
  OutplantingRow   OutplantingRow[]

  @@index([fileUploadId])
}

model User {
  id             String           @id
  email          String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  clerkUserId    String           @unique
  godMode        Boolean          @default(false)
  FileUpload     FileUpload[]
  GeneticMapping GeneticMapping[]
}

model GeneticsRow {
  id               String       @id
  fileUploadId     String
  localIdGenetProp String
  additionalData   Json
  accessionNumber  String?
  species          String?
  GeneticsFile     GeneticsFile @relation(fields: [fileUploadId], references: [id])

  @@index([fileUploadId])
}

model MonitoringRow {
  id             String         @id
  fileUploadId   String
  additionalData Json
  QtySurvived    Int            @default(0)
  MonitoringFile MonitoringFile @relation(fields: [fileUploadId], references: [id])

  @@index([fileUploadId])
}

model NurseryRow {
  id             String      @id
  fileUploadId   String
  genetId        String
  quantity       Int
  nursery        String
  additionalData Json
  NurseryFile    NurseryFile @relation(fields: [fileUploadId], references: [id])

  @@index([fileUploadId])
}

model OutplantingRow {
  id              String          @id
  fileUploadId    String
  genetId         String
  quantity        Int
  grouping        String
  additionalData  Json
  OutplantingFile OutplantingFile @relation(fields: [fileUploadId], references: [id])

  @@index([fileUploadId])
}

model GeneticMapping {
  id              String   @id
  localGenetId    String
  externalGenetId String
  createdAt       DateTime @default(now())
  userId          String
  User            User     @relation(fields: [userId], references: [id])

  @@index([externalGenetId])
  @@index([localGenetId])
}

enum FileCategory {
  Genetics
  Nursery
  Outplanting
  Monitoring
  GeneticsMapping
}

enum FileStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}
